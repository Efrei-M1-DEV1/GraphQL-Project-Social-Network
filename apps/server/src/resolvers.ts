import type { DataSourceContext } from "./context";
import type { Resolvers } from "./types"; // Generated by GraphQL Codegen

export const resolvers: Resolvers = {
  Query: {
    hello: async () => {
      await new Promise((resolve) => setTimeout(resolve, 5000));
      return "Hello, GraphQL!";
    },
    users: async (_parent, _args, context: DataSourceContext) => {
      const users = await context.dataSources.db.user.findMany();
      return users.map((user) => ({
        ...user,
        createdAt: user.createdAt.toISOString(), // Convert Date to ISO string
        updatedAt: user.updatedAt.toISOString(), // Convert Date to ISO string
      }));
    },
    article: async (_parent, { id }, context: DataSourceContext) => {
      const article = await context.dataSources.db.article.findUnique({
        where: { id },
        include: { author: true },
      });
      if (!article) {
        return null;
      }
      return {
        ...article,
        createdAt: article.createdAt.toISOString(),
        updatedAt: article.updatedAt.toISOString(),
        author: {
          ...article.author,
          createdAt: article.author.createdAt.toISOString(),
          updatedAt: article.author.updatedAt.toISOString(),
        },
      };
    },
    articles: async (_parent, { first, after }, context: DataSourceContext) => {
      const articles = await context.dataSources.db.article.findMany({
        take: first || 10,
        skip: after || 0,
        orderBy: { createdAt: "desc" },
        include: { author: true },
      });
      return articles.map((article) => ({
        ...article,
        createdAt: article.createdAt.toISOString(),
        updatedAt: article.updatedAt.toISOString(),
        author: {
          ...article.author,
          createdAt: article.author.createdAt.toISOString(),
          updatedAt: article.author.updatedAt.toISOString(),
        },
      }));
    },
    articlesByAuthor: async (_parent, { authorId, first, after }, context: DataSourceContext) => {
      const articles = await context.dataSources.db.article.findMany({
        where: { authorId },
        take: first || 10,
        skip: after || 0,
        orderBy: { createdAt: "desc" },
        include: { author: true },
      });
      return articles.map((article) => ({
        ...article,
        createdAt: article.createdAt.toISOString(),
        updatedAt: article.updatedAt.toISOString(),
        author: {
          ...article.author,
          createdAt: article.author.createdAt.toISOString(),
          updatedAt: article.author.updatedAt.toISOString(),
        },
      }));
    },
  },
  Mutation: {
    createArticle: async (_parent, { title, content }, context: DataSourceContext) => {
      if (!context.user) {
        throw new Error("Unauthorized: Please log in");
      }
      const article = await context.dataSources.db.article.create({
        data: {
          title,
          content,
          authorId: context.user.id,
        },
        include: { author: true },
      });
      return {
        ...article,
        createdAt: article.createdAt.toISOString(),
        updatedAt: article.updatedAt.toISOString(),
        author: {
          ...article.author,
          createdAt: article.author.createdAt.toISOString(),
          updatedAt: article.author.updatedAt.toISOString(),
        },
      };
    },
    updateArticle: async (_parent, { id, title, content }, context: DataSourceContext) => {
      if (!context.user) {
        throw new Error("Unauthorized: Please log in");
      }
      const article = await context.dataSources.db.article.findUnique({ where: { id } });
      if (!article) {
        throw new Error("Article not found");
      }
      if (article.authorId !== context.user.id) {
        throw new Error("Forbidden: You can only update your own articles");
      }
      const updatedArticle = await context.dataSources.db.article.update({
        where: { id },
        data: { title: title ?? undefined, content: content ?? undefined },
        include: { author: true },
      });
      return {
        ...updatedArticle,
        createdAt: updatedArticle.createdAt.toISOString(),
        updatedAt: updatedArticle.updatedAt.toISOString(),
        author: {
          ...updatedArticle.author,
          createdAt: updatedArticle.author.createdAt.toISOString(),
          updatedAt: updatedArticle.author.updatedAt.toISOString(),
        },
      };
    },
    deleteArticle: async (_parent, { id }, context: DataSourceContext) => {
      if (!context.user) {
        throw new Error("Unauthorized: Please log in");
      }
      const article = await context.dataSources.db.article.findUnique({ where: { id } });
      if (!article) {
        throw new Error("Article not found");
      }
      if (article.authorId !== context.user.id) {
        throw new Error("Forbidden: You can only delete your own articles");
      }
      await context.dataSources.db.article.delete({ where: { id } });
      return true;
    },
  },
};
